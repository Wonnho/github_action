name: deploy service
on:
  push:
    branches:
      - main

jobs:
  ssh-agent:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #디스코드 webhook :메시지 알람
      - name: Start Message
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{secrets.DISCORD_WEBHOOK }}
          TITLE: "DEPLOYMENT START"
       #cache 저앙 설정을 위한 action(library)
      - name: Cache Docker Image Layer
      #actions/cache: github cache 저장소 활용을 위한 라이브러리
        uses: actions/cache@v4.2.0
        with"
          path: /tmp/.buildx-cache
          key:docker

      - name: 테스트 ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Remote Server Fingerprint to Known Hosts
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true

      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env

      #docker BuildKit engine setup action(library)
      - name: Set up docker BuildKit
      #setup-buildx-action
      #BuildKit를 설치하는 action (library)
      #buildx=BuildKit
        uses: docker/setput-buildx-action@v3

    # BuildKit engine Builder 생성
    # 기존 Docker builder는  cache를 제어할 수 없다. 파일 저장&불러오기 경로 제어 불가
      - name: Create Buildkit
      #1. buildkit buildkit를 생성하는 명령어
      #2. buildkit 설정 명령어
        run: |   #| 명령어를 이어서 쓸 경우 이용
          docker buildx create --use --name buildkit
          docker buildx use buildkit


      - name: Docker Image Build
        run: docker compose -f docker-compose-actions-cache.yml build --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Login DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker Image Push
        run: docker compose -f docker-compose-actions-cache.yml push

      - name: Copy .env/ docker-compose-actions-cache.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose-actions-cache.yml,.env"
          target: "~/work-directory"

      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/work-directory
            docker compose -f docker-compose-actions-cache.yml pull
            docker compose -f docker-compose-actions-cache.yml down
            docker compose -f docker-compose-actions-cache.yml up -d

       #디스코드 :종료 알림 메세지
      - name: Start Message
        uses: sarisia/actions-status-discord@v1
        if: success()
     
        with:
          webhook: ${{secrets.DISCORD_WEBHOOK }}
          TITLE: "DEPLOYMENT START-Success"
     
       #디스코드 : 종료 알림 메시지 실패시
      - name: Start Message
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{secrets.DISCORD_WEBHOOK }}
          TITLE: "DEPLOYMENT START-failed"
